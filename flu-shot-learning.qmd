---
title: "flu-shot-learning"
---

# Flu Shot Learning: Predict H1N1 and Seasonal Flu Vaccines

The project goal is to predict how likely individuals are to receive their H1N1 and seasonal flu vaccines. Specifically, we'll be predicting two probabilities: one for `h1n1_vaccine` and one for `seasonal_vaccine`.

The data for this competition comes from the National 2009 H1N1 Flu Survey (NHFS).

```{r - Import Data}

getwd()

# READ TRAIN & TEST DATA
train_features <- read.csv("training_set_features.csv")
train_labels <- read.csv("training_set_labels.csv")
test_features  <- read.csv("test_set_features.csv")

# MERGE FEATURES & LABELS FOR TRAIN DATA
train <- merge(train_features, train_labels, by = "respondent_id")

```

```{r - Install packages if not already installed}

packages <- c("tidyverse", "naniar", "fastDummies", "forcats", "dplyr")


installed <- packages %in% rownames(installed.packages())

if (any(!installed)) {
  install.packages(packages[!installed])
}

library(dplyr)
library(tidyverse)
library(naniar)
library(fastDummies)
library(forcats)

```

## I. Executive Summary

## II. Exploratory Data Analysis

In this section, we perform an exploratory analysis of the dataset to better understand the underlying patterns and characteristics of the data. Our primary focus includes:

-   **Examining class balance** for the two target variables (`h1n1_vaccine` and `seasonal_vaccine`) to identify potential imbalances that could impact model performance.

-   **Reviewing feature distributions and missing values** to guide data cleaning and preprocessing steps.

-   **Investigating correlations and relationships** between features and target variables to inform feature selection and engineering.

Understanding these aspects early helps to develop more effective predictive models and ensures we address any data quality issues upfront.

```{r - EDA Class Balance}

# CHECK CLASS BALANCE
cat("Class balance for h1n1_vaccine:\n")
table(train$h1n1_vaccine)
cat("\nProportions for h1n1_vaccine:\n")
prop.table(table(train$h1n1_vaccine))

cat("\nClass balance for seasonal_vaccine:\n")
table(train$seasonal_vaccine)
cat("\nProportions for seasonal_vaccine:\n")
prop.table(table(train$seasonal_vaccine))

```

### Class Balance Analysis:

The target variables exhibit differing levels of class balance:

-   **H1N1 Vaccine:** The data set is imbalanced with approximately 21% of respondents having received the H1N1 vaccine, while 79% did not.

-   **Seasonal Vaccine:** The distribution is more balanced, with roughly 47% having received the seasonal flu vaccine and 53% not.

This imbalance in the H1N1 vaccine target suggests the need for careful handling during modeling, such as considering stratified sampling or using evaluation metrics that account for imbalance.

```{r - EDA Missing Data}

# LOOK AT MISSING DATA
install.packages("naniar")
library(naniar)

gg_miss_var(train)  # VISUALIZE

```

### **Missing Data Overview:**

The missing data visualization reveals the extent of incomplete information across different features. The `health_insurance` variable has the highest amount of missing data, with almost 12,500 entries missing. The `doctor_recc_seasonal` and `doctor_recc_h1n1` variable follows with almost 2,500 missing entries each. These substantial gaps suggest that many respondents did not provide or have missing values for these features, which could affect the quality of any models using them. Addressing this missingness through appropriate imputation or exclusion strategies will be important in the analysis.

```{r - Summary Statistics for Numeric Variables}

# NUMERIC VARIABLES SUMMARY
select(train, where(is.numeric))

```

### **Summary Statistics (Numeric Variables) Overview:**

The table above presents the basic summary statistics for the numeric variables in our data set. This includes:

-   **`Respondent ID`** ranging from 0 to 26,706, representing unique survey participants.

-   Variables like **`h1n1_concern`** and **`h1n1_knowledge`** are ordinal, ranging from 0 to 3 and 0 to 2 respectively, indicating self-reported levels of concern and knowledge about H1N1.

-   Behavioral variables (e.g., `behavioral_antiviral_meds`, `behavioral_face_mask`, `behavioral_wash_hands`) are mostly binary indicators (0 or 1) reflecting respondents’ preventive actions.

-   Missing values (NAs) vary significantly: for example, **`health_insurance`** has a high number of missing entries (\~12,000), while others like **`doctor_recc_h1n1`** have fewer but still notable missing data.

-   Variables related to opinions on vaccines (e.g., `opinion_h1n1_vacc_effective`, `opinion_seas_risk`) are on a Likert scale (1 to 5), showing varying levels of perceived effectiveness and risk.

This overview helps us understand the distribution and completeness of the data, guiding subsequent cleaning and analysis steps.

```{r - Summary Statistics for Categorical Variables}

# FREQUENCY COUNTS FOR CATEGORICAL VARIABLES
train %>%
  select(where(~is.character(.) || is.factor(.))) %>%
  summarise(across(everything(), ~ list(table(.)))) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "counts") %>%
  print()

# UNNEST COUNTS FOR EACH CATEGORICAL VARIABLE
vars_to_print <- c("age_group", "education", "race", "sex", "income_poverty")
print_freq_tables <- function(df, vars) {
  for (var in vars) {
    cat("\n--- Frequency for:", var, "---\n")
    print(table(df[[var]], useNA = "ifany"))
  }
}

print_freq_tables(train, vars_to_print)


```

### **Categorical Variable Distributions:**

The data set contains several key demographic and socio-economic categorical variables. For example, the **age group** distribution shows a balanced representation across different ranges, with the highest count in the "65+ Years" group (6,843 respondents) and the lowest in the "35 - 44 Years" group (3,848 respondents).

**Education** levels vary widely, with the largest group having "Some College" education (10,097 respondents), followed by "College Graduate" (7,043 respondents), and the smallest group with less than 12 years of education (1,407 respondents).

Regarding **race**, the majority of respondents identify as "White" (21,222), with smaller proportions identifying as "Black" (2,118), "Hispanic" (1,755), and "Other or Multiple" (1,612).

In terms of **sex**, females make up a larger portion of the sample (15,858) compared to males (10,849).

For **income and poverty status**, the majority fall into the "\> \$75,000" income category (12,777), followed by those "Below Poverty" (6,810), and those "≤ \$75,000, Above Poverty" (4,423).

### Plotting Numerical Variables:

#### Ordinal Variables (with label mappings):

+--------------------------------+-----------------------------------------------+
| Variable                       | Labels                                        |
+================================+===============================================+
| `h1n1_concern`                 | 0 = Not at all concerned → 3 = Very concerned |
+--------------------------------+-----------------------------------------------+
| `h1n1_knowledge`               | 0 = No knowledge → 2 = A lot of knowledge     |
+--------------------------------+-----------------------------------------------+
| `opinion_h1n1_vacc_effective`\ | 1 = Not at all effective → 5 = Very effective |
| `opinion_seas_vacc_effective`  |                                               |
+--------------------------------+-----------------------------------------------+
| `opinion_h1n1_risk`\           | 1 = Very Low → 5 = Very High                  |
| `opinion_seas_risk`            |                                               |
+--------------------------------+-----------------------------------------------+
| `opinion_h1n1_sick_from_vacc`\ | 1 = Not at all worried → 5 = Very worried     |
| `opinion_seas_sick_from_vacc`  |                                               |
+--------------------------------+-----------------------------------------------+

```{r - Plot Distributions of Ordinal Variables}

# DEFINE ORDINAL MAPPINGS
ordinal_mappings <- list(
  h1n1_concern = c("0" = "Not at all concerned", "1" = "Not very concerned", 
                   "2" = "Somewhat concerned", "3" = "Very concerned"),
  h1n1_knowledge = c("0" = "No knowledge", "1" = "A little knowledge", 
                     "2" = "A lot of knowledge"),
  opinion_h1n1_vacc_effective = c("1" = "Not at all effective", "2" = "Not very effective", 
                                   "3" = "Don't know", "4" = "Somewhat effective", "5" = "Very effective"),
  opinion_seas_vacc_effective = c("1" = "Not at all effective", "2" = "Not very effective", 
                                   "3" = "Don't know", "4" = "Somewhat effective", "5" = "Very effective"),
  opinion_h1n1_risk = c("1" = "Very low", "2" = "Somewhat low", 
                        "3" = "Don't know", "4" = "Somewhat high", "5" = "Very high"),
  opinion_seas_risk = c("1" = "Very low", "2" = "Somewhat low", 
                        "3" = "Don't know", "4" = "Somewhat high", "5" = "Very high"),
  opinion_h1n1_sick_from_vacc = c("1" = "Not at all worried", "2" = "Not very worried", 
                                  "3" = "Don't know", "4" = "Somewhat worried", "5" = "Very worried"),
  opinion_seas_sick_from_vacc = c("1" = "Not at all worried", "2" = "Not very worried", 
                                  "3" = "Don't know", "4" = "Somewhat worried", "5" = "Very worried")
)

# LOOP THROUGH VARIABLES
for (var in names(ordinal_mappings)) {
  # CONVERT TO ORDERED FACTOR
  train[[var]] <- factor(train[[var]],
                         levels = names(ordinal_mappings[[var]]),
                         labels = ordinal_mappings[[var]],
                         ordered = TRUE)
  
  # CREATE PLOT
  p <- ggplot(train, aes(x = .data[[var]])) +
    geom_bar(fill = "#4E79A7") +
    labs(title = paste("Distribution of", var),
         x = NULL,
         y = "Count") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 30, hjust = 1))
  
  # PRINT PLOT
  print(p)
}


```

#### Binary Variables:

Binary variables indicate yes/no responses, where 1 = Yes and 0 = No.

-   **behavioral_antiviral_meds**: Taken antiviral meds

-   **behavioral_avoidance**: Avoided close contact with sick people

-   **behavioral_face_mask**: Bought/used a face mask

-   **behavioral_wash_hands**: Frequently washed hands or used sanitizer

-   **behavioral_large_gatherings**: Reduced time at large gatherings

-   **behavioral_outside_home**: Reduced contact outside household

-   **behavioral_touch_face**: Avoided touching face

-   **doctor_recc_h1n1**: Doctor recommended H1N1 vaccine

-   **doctor_recc_seasonal**: Doctor recommended seasonal vaccine

-   **chronic_med_condition**: Has chronic medical condition

-   **child_under_6_months**: Close contact with infant under 6 months

-   **health_worker**: Is healthcare worker

-   **health_insurance**: Has health insurance

```{r - Plot Binary Numeric Variables}

# LIST OF BINARY VARIABLES
binary_vars <- c(
  "behavioral_antiviral_meds", "behavioral_avoidance", "behavioral_face_mask",
  "behavioral_wash_hands", "behavioral_large_gatherings", "behavioral_outside_home",
  "behavioral_touch_face", "doctor_recc_h1n1", "doctor_recc_seasonal",
  "chronic_med_condition", "child_under_6_months", "health_worker",
  "health_insurance"
)

# SELECT AND PIVOT LONGER
binary_long <- train %>%
  select(all_of(binary_vars)) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  filter(!is.na(value))  # REMOVE NAs

# PLOT
ggplot(binary_long, aes(x = factor(value), fill = factor(value))) +
  geom_bar() +
  facet_wrap(~ variable, scales = "free_y", ncol = 3) +
  scale_fill_manual(values = c("0" = "lightgray", "1" = "steelblue")) +
  labs(x = "Value", y = "Count", fill = "Value") +
  theme_minimal()

```

### Handling Missing Data

To address missing values in the dataset, we applied the following cleaning strategy:

-   For **categorical and factor variables**, missing values were replaced with the label `"Unknown"`. This approach preserves the presence of missing information without introducing bias through imputation of common categories.

-   For **numeric and binary variables**, missing values were replaced with `-1`, a placeholder that clearly flags missing entries while allowing models that require numeric input to process the data without errors.

This method ensures that all variables are complete and ready for modeling, while retaining the informational value of missingness in the dataset.

```{r - Changing NAs to "Unknown"}

# REPLACE NAs IN CATEGORICAL VARIABLES WITH "UNKNOWN"
train <- train %>%
  mutate(across(where(is.character), ~ replace_na(., "Unknown")))

# REPLACE NAs IN FACTORS WITH "UNKNOWN" (IF ANY FACTOR VARS)
train <- train %>%
  mutate(across(where(is.factor), ~ fct_explicit_na(., na_level = "Unknown")))

# REPLACE NAs IN NUMERIC/BINARY WITH -1
train <- train %>%
  mutate(across(where(is.numeric), ~ replace_na(., -1)))

```

### Categorical Variable Transformation

To prepare the dataset for modeling, we transformed categorical variables into a format suitable for machine learning algorithms. Specifically, we applied one-hot encoding (dummy variable creation) to categorical features, including `age_group`, `education`, `race`, `sex`, `income_poverty`, `marital_status`, `rent_or_own`, `employment_status`, and `census_msa`.

For each categorical variable, we created binary indicator columns for all but one category (reference level) to avoid multicollinearity in the models. This ensures that the transformed dataset provides clear, interpretable signals while maintaining numerical compatibility with a variety of modeling techniques.

```{r - Transform Categorical Variables}

# APPLY DUMMY ENCODING
train <- fastDummies::dummy_cols(
  train,
  select_columns = c("age_group", "education", "race", "sex",
                     "income_poverty", "marital_status", "rent_or_own",
                     "employment_status", "census_msa"),
  remove_first_dummy = TRUE,         # AVOID MULTICOLLINEARITY (DROPS 1 LEVEL PER VAR)
  remove_selected_columns = TRUE     # DROP ORIGINAL TEXT COLUMNS AFTER CREATING DUMMIES
)

# CHECK RESULTS
head(train)

```

### **Character Categorical Variables Transformation**

The dataset contains several categorical variables stored as character strings, including `hhs_geo_region`, `employment_industry`, and `employment_occupation`. These variables represent geographic regions and employment details of respondents. For effective analysis and modeling, these character variables were converted into factor data types to enable proper handling of categorical data in statistical models. This transformation facilitates better interpretation and allows models to correctly treat these variables as nominal categories rather than continuous data.

```{r - Transform Character String Variables}

train$hhs_geo_region <- as.factor(train$hhs_geo_region)
train$employment_industry <- as.factor(train$employment_industry)
train$employment_occupation <- as.factor(train$employment_occupation)

```

### **Ordinal Variable Transformation**

We identified and transformed key ordinal variables, such as `h1n1_concern`, `h1n1_knowledge`, and various `opinion_*` variables, to ensure they are correctly treated in our models. These variables, representing ordered categories (e.g., levels of concern, knowledge, perceived vaccine effectiveness, and risk), were converted to ordered factors or numeric scores, depending on the modeling approach. This transformation preserves the inherent ranking in the data, allowing our models to better capture the relationships between these features and the target variables.

```{r - Transform Ordinal Variables}

# TRANSFORM OPINION VARIABLES 
effectiveness_levels <- c("Not at all effective", "Not very effective", "Don't know", 
                          "Somewhat effective", "Very effective")
risk_levels <- c("Very low", "Somewhat low", "Don't know", "Somewhat high", "Very high")
worry_levels <- c("Not at all worried", "Not very worried", "Don't know", 
                  "Somewhat worried", "Very worried")

train <- train %>%
  mutate(
    opinion_h1n1_vacc_effective = factor(opinion_h1n1_vacc_effective, 
                                         levels = effectiveness_levels, ordered = TRUE),
    opinion_seas_vacc_effective = factor(opinion_seas_vacc_effective, 
                                         levels = effectiveness_levels, ordered = TRUE),
    opinion_h1n1_risk = factor(opinion_h1n1_risk, 
                               levels = risk_levels, ordered = TRUE),
    opinion_seas_risk = factor(opinion_seas_risk, 
                               levels = risk_levels, ordered = TRUE),
    opinion_h1n1_sick_from_vacc = factor(opinion_h1n1_sick_from_vacc, 
                                         levels = worry_levels, ordered = TRUE),
    opinion_seas_sick_from_vacc = factor(opinion_seas_sick_from_vacc, 
                                         levels = worry_levels, ordered = TRUE)
  )

```

### Final Data Check

All variables in the dataset have been transformed as needed for analysis and modeling. Ordinal variables were converted to ordered factors, character variables were re-coded as nominal factors, and categorical variables were dummy encoded where appropriate. Missing data in opinion-related variables were retained through the addition of a `"Missing"` level, preserving potential signal in non-response patterns. The table below confirms that all variables are now in their proper formats, with no outstanding transformation or cleaning required.

```{r - Check Variables}

str(train)
```

```{r - Final Check for Missing Data}

library(naniar)
library(dplyr)
library(tidyr)
vis_miss(train %>% sample_n(1000))  # random sample of 1,000 rows

train %>%
  summarise(across(everything(), ~sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "missing_count") %>%
  filter(missing_count > 0) %>%
  arrange(desc(missing_count))

sum(is.na(train))

```

```{r - Add Missing Level to Missing Opinion Variable Responses}

add_missing_level <- function(x) {
  levels(x) <- c(levels(x), "Missing")
  x[is.na(x)] <- "Missing"
  return(x)
}

# APPLY TO ALL 6 VARIABLES WITH MISSING RESPONSES
train$opinion_seas_sick_from_vacc <- add_missing_level(train$opinion_seas_sick_from_vacc)
train$opinion_seas_risk <- add_missing_level(train$opinion_seas_risk)
train$opinion_seas_vacc_effective <- add_missing_level(train$opinion_seas_vacc_effective)
train$opinion_h1n1_sick_from_vacc <- add_missing_level(train$opinion_h1n1_sick_from_vacc)
train$opinion_h1n1_vacc_effective <- add_missing_level(train$opinion_h1n1_vacc_effective)
train$opinion_h1n1_risk <- add_missing_level(train$opinion_h1n1_risk)
```

## III. Data Modeling

### A. Logistic Regression Model

#### `h1n1_vaccine` Data Splitting for Model Training and Evaluation

To reliably evaluate model performance before making final predictions, the original training dataset was split into training and validation subsets. Using stratified sampling to preserve the distribution of the target variable (`h1n1_vaccine`), 80% of the data was allocated for model training, and the remaining 20% was reserved for validation. This approach enables robust assessment of the model’s predictive accuracy and generalizability on unseen data, ensuring that model tuning decisions are well-informed before applying the model to the final test set.

```{r - Split h1n1_vaccine Train Data}

library(caret)
set.seed(123)

# CREATE 80/20SPLIT WITH TRAIN DATA
train_index <- createDataPartition(train$h1n1_vaccine, p = 0.8, list = FALSE)
train_data <- train[train_index, ]
valid_data <- train[-train_index, ]

# PREPARE PREDICTORS EXCLUDING IDs AND LABELS
predictors <- setdiff(names(train_data), c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))

# WRAP VARIABLE NAMES WITH BACKTICKS TO HANDLE SPACES/SPECIAL CHARACTERS
predictors_backticked <- paste0("`", predictors, "`")

# BUILD FORMULA USING BACKTICKED VARIABLE NAMES
formula_str <- paste("h1n1_vaccine ~", paste(predictors_backticked, collapse = " + "))
formula <- as.formula(formula_str)

```

#### `h1n1_vaccine` Model Specification and Fitting

We built a logistic regression model to estimate the probability of seasonal flu vaccination based on a comprehensive set of predictors including demographic factors (age, race, income), health-related variables (chronic conditions, health insurance), behavioral practices (mask-wearing, hand washing), and individual opinions about vaccines.

The model was trained on the training dataset using the binomial family to fit the binary vaccination outcome. Several predictors were found statistically significant, including doctor recommendations, health insurance coverage, and vaccine-related attitudes, highlighting their importance in influencing vaccination behavior.

During fitting, some predictors were excluded due to multicollinearity (singularities), ensuring model stability. The final model converged after six iterations, indicating a good fit to the training data.

```{r - Fit Logistic Model}

# FIT LOGISTIC REGRESSION ON TRAINING PARTITION
logit_model <- glm(formula, data = train_data, family = binomial)

summary(logit_model)
```

#### **`h1n1_vaccine` Logistic Model Performance Summary**

We fitted a logistic regression model to predict seasonal flu vaccination status using various demographic, behavioral, and opinion variables. The model achieved an overall accuracy of 84.9%, indicating strong predictive performance. The Area Under the Curve (AUC) of 0.85 further confirms good discriminatory ability between vaccinated and non-vaccinated individuals.

The model demonstrates high sensitivity (94.5%) in correctly identifying individuals who did not receive the vaccine, but lower specificity (48.1%) for correctly identifying those who did get vaccinated. This imbalance suggests the model is better at predicting the majority class (non-vaccinated), likely reflecting underlying class imbalance in the data.

While the model provides valuable insights into key predictors of vaccination behavior, such as doctor recommendations and health status, further improvements could be explored by adjusting classification thresholds or applying more complex machine learning models to better capture the minority class.

```{r - Evaluating the Logistic Model}

library(caret)
library(pROC)

# PREDICT PROBABILITIES ON VALIDATION DATA
logit_preds <- predict(logit_model, newdata = valid_data, type = "response")

# CONVER PROBABILITIES TO CLASSES WITH 0.5 CUTOFF
logit_classes <- ifelse(logit_preds > 0.5, 1, 0)

# CONFUSION MATRIX FOR CLASSIFICATION PERFORMANCE
conf_matrix <- confusionMatrix(
  factor(logit_classes, levels = c(0,1)), 
  factor(valid_data$h1n1_vaccine, levels = c(0,1))
)
print(conf_matrix)

# CALCULATE AUC (AREA UNDER ROC CURVE)
roc_obj <- roc(valid_data$h1n1_vaccine, logit_preds)
auc_val <- auc(roc_obj)
cat("AUC:", auc_val, "\n")

```

#### Additional `h1n1_vaccine` Logistic Model Performance Metrics

The logistic regression model predicting **H1N1 vaccine uptake** achieved strong classification performance on the validation set. It yielded an **F1 score** of 0.91, indicating a well-balanced trade-off between precision and recall. The **precision** of 87.4% suggests that most predicted vaccine recipients were correctly identified, while the **recall** of 94.5% shows excellent sensitivity in capturing actual recipients. The ROC curve confirms the model's discriminatory ability, though with room for improvement as indicated by curvature close to the diagonal in earlier thresholds. Overall, the model performs well for identifying likely vaccine recipients, despite some class imbalance in the data.

```{r - Additional Performance Metrics, i.e., F1 and ROC}

install.packages("yardstick")
library(yardstick)
library(ggplot2)

# COMBINR PREDICTIONS AND TRUE LABELS
eval_df <- data.frame(
  truth = factor(valid_data$h1n1_vaccine),
  prediction = factor(logit_classes),
  prob = logit_preds
)

# F1, PRECISION, RECALL
f_meas(eval_df, truth = truth, estimate = prediction)
precision(eval_df, truth = truth, estimate = prediction)
recall(eval_df, truth = truth, estimate = prediction)

# ROC CURVE
eval_df$.pred_1 <- eval_df$prob
roc_df <- roc_curve(data = eval_df, truth = truth, .pred_1)
autoplot(roc_df)
```

#### `seasonal_vaccine` Data Splitting for Model Training and Evaluation

To evaluate the performance of our logistic regression model predicting seasonal flu vaccination status, we split the original training dataset into training and validation subsets. Using stratified sampling via the `createDataPartition` function from the caret package, 80% of the data was allocated for model training while the remaining 20% was reserved for validation. This stratification preserved the original distribution of the `seasonal_vaccine` outcome, ensuring balanced representation of vaccinated and non-vaccinated individuals in both subsets. This approach provides a robust framework to assess model accuracy and generalizability before applying it to unseen data.

```{r - Split seasonal_vaccine Train Data}

install.packages("caret")
library(caret)
set.seed(123)

train_index_seasonal <- createDataPartition(train$seasonal_vaccine, p = 0.8, list = FALSE)
train_data_seasonal <- train[train_index_seasonal, ]
valid_data_seasonal <- train[-train_index_seasonal, ]

predictors <- setdiff(names(train_data_seasonal), c("respondent_id", "h1n1_vaccine", "seasonal_vaccine"))
predictors_backticked <- paste0("`", predictors, "`")

formula_str <- paste("seasonal_vaccine ~", paste(predictors_backticked, collapse = " + "))
formula <- as.formula(formula_str)

```

#### `seasonal_vaccine` Model Specification and Fitting

We developed a logistic regression model to predict the likelihood of receiving the seasonal flu vaccine, using a comprehensive set of predictors that included demographic factors (age, race, income, education), health-related variables (chronic conditions, health insurance status, doctor recommendations), behavioral practices (mask wearing, hand washing), and personal opinions about vaccines.

The model was trained on the training dataset with a binomial family, reflecting the binary nature of the vaccination outcome. Several predictors showed strong statistical significance, notably doctor recommendations, health insurance coverage, age groups, and vaccine-related attitudes, emphasizing their critical role in influencing vaccination decisions.

During the modeling process, some variables were excluded due to multicollinearity (singularities) to maintain model stability. The model converged successfully after five iterations, demonstrating a good fit, with residual deviance substantially reduced from the null model. These results suggest the model effectively captures key factors driving seasonal vaccine uptake.

```{r - seasonal_vaccine Logistic Model}

#SEASONAL VACCINE LOGISTIC MODEL
seasonal_model <- glm(formula, data = train_data_seasonal, family = binomial)

summary(seasonal_model)

```

#### `seasonal_vaccine` **Logistic Model Performance Summary**

We fitted a logistic regression model to predict seasonal flu vaccination status using a broad range of demographic, behavioral, and opinion-based predictors. The model achieved an overall accuracy of 82.6%, demonstrating strong performance in identifying individuals' vaccination status. The Area Under the Curve (AUC) was 0.86, indicating a high ability to distinguish between vaccinated and non-vaccinated individuals.

The model exhibited high sensitivity (93.1%) for correctly identifying those who did not receive the seasonal vaccine, but lower specificity (50.2%) for correctly identifying vaccinated individuals. This indicates the model performs well on the majority class (non-vaccinated), with room for improvement in detecting the minority class.

Key predictors included doctor recommendations, health insurance, age, and opinions about seasonal vaccine effectiveness and risk. While the model offers meaningful insights into factors influencing vaccination behavior, future enhancements—such as threshold tuning or ensemble methods—could improve performance on the minority class and support more balanced predictions.
